openapi: 3.0.0
info:
  version: "1.0.1"
  title: Test
tags:
  - name: Test
servers:
  - url: http://localhost:8001/openapi/Test/v1_0_1
  - url: http://localhost:8082/openapi/Test/v1_0_1
  - url: http://rollun-openapi/openapi/Test/v1_0_1
paths:
  /Test:
    post:
      tags:
        - Test
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Test'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Test'
    get:
      tags:
        - Test
      parameters:
        - name: name
          in: query
          required: false
          explode: false
          schema:
            type: string
        - name: id
          in: query
          required: false
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
        - name: test
          in: query
          required: false
          schema:
            type: array
            items:
              type: integer
      responses:
        200:
          description: List
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Collection'
  /Test/{id}:
    get:
      tags:
        - Test
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            example: '5f51f78ccaa4c'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Test'
    delete:
      tags:
        - Test
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            example: '5f51f78ccaa4c'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OkResponse"
  /test/{pathParam}/custom:
    get:
      tags:
        - Test
      parameters:
        - name: pathParam
          in: path
          required: true
          schema:
            type: string
            example: '5f51f78ccaa4c'
        - name: queryParam
          in: query
          required: false
          schema:
            type: string
        - name: arrayParam
          in: query
          required: false
          explode: false
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/TestCustomResponse'
    post:
      tags:
        - Test
      parameters:
        - name: pathParam
          in: path
          required: true
          schema:
            type: string
            example: '5f51f78ccaa4c'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Test'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Test'
  /test/{pathParam}/operation:
    get:
      tags:
        - Test
      operationId: customOperationGet
      parameters:
        - name: pathParam
          in: path
          required: true
          schema:
            type: string
        - name: queryParam
          in: query
          required: false
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/TestCustomResponse'
    post:
      tags:
        - Test
      operationId: customOperationPost
      parameters:
        - name: pathParam
          in: path
          required: true
          schema:
            type: string
            example: '5f51f78ccaa4c'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Test'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Test'
  /Bla:
    post:
      tags:
        - Bla
      responses:
        '201':
          description: Created
    get:
      tags:
        - Bla
      parameters:
        - name: name
          in: query
          schema:
            type: string
        - name: id
          in: query
          required: false
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlaResult'
        500:
          description: Internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
components:
  schemas:
    Test:
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: string
          example: '5f51f78ccaa4c'
        name:
          type: string
          example: 'Test'
    Collection:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Test'
    BlaResult:
      allOf:
        - $ref: '#/components/schemas/ErrorResult'
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Bla'
    Bla:
      required:
        - id
        - name
      properties:
        id:
          type: string
        name:
          type: string
    OkResponse:
      type: object
      allOf:
        - $ref: '#/components/schemas/ErrorResult'
      properties:
        data:
          type: string
          enum:
            - OK
    ErrorResult:
      type: object
      properties:
        messages:
          type: array
          items:
            $ref: '#/components/schemas/Message'
    Message:
      type: object
      required:
        - level
        - text
      properties:
        level:
          type: string
          description: 'Message level  (like in a logger)'
          example: 'error'
        text:
          type: string
          description: 'Message text'
          example: 'Something wrong.'
        context:
          type: array
          description: 'Message context (like in a logger)'
          items:
            type: string
    TestCustomResponse:
      allOf:
        - $ref: '#/components/schemas/ErrorResult'
      type: object
      properties:
        data:
          $ref: "#/components/schemas/TestCustom"
    TestCustom:
      type: object
      properties:
        pathParam:
          type: string
        queryParam:
          type: string
