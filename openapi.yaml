openapi: 3.0.0
info:
  version: "1"
  title: HelloUser
servers:
  - url: http://rollun-openapi/openapi/HelloUser/v1
  - url: http://localhost:8080/openapi/HelloUser/v1
tags:
  - name: User
  - name: Hello
paths:
  /User:
    get:
      tags:
        - User
      parameters:
        -   name: name
            in: query
            required: false
            schema:
              nullable: true
              type: string
      responses:
        '200':
          description: Result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserListResult'
    post:
      tags:
        - User
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResult'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
        '500':
          description: Internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
  /User/{id}:
    get:
      tags:
        - User
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            example: '5f51f78ccaa4c'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResult'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
        '500':
          description: Internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
  /Hello/{id}:
    get:
      tags:
        - Hello
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            example: '5f51f78ccaa4c'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HelloResult'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
        '500':
          description: Internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
components:
  schemas:
    Message:
      type: object
      required:
        - level
        - text
      properties:
        level:
          type: string
          description: 'Message level  (like in a logger)'
          example: 'error'
        text:
          type: string
          description: 'Message text'
          example: 'Something wrong.'
        context:
          type: array
          description: 'Message context (like in a logger)'
          items:
            type: string
    ErrorResult:
      type: object
      properties:
        messages:
          type: array
          items:
            $ref: '#/components/schemas/Message'
    Result:
      allOf:
        - $ref: '#/components/schemas/ErrorResult'
      type: object
      properties:
        data:
          type: object
    UserListResult:
      allOf:
        - $ref: '#/components/schemas/Result'
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/User'
    UserResult:
      allOf:
        - $ref: '#/components/schemas/Result'
      type: object
      properties:
        data:
          $ref: '#/components/schemas/User'
    User:
      type: object
      required:
        - id
      properties:
        id:
          type: string
          example: '5f51f78ccaa4c'
        name:
          type: string
          nullable: true
          example: 'Roman'
    HelloResult:
      allOf:
        - $ref: '#/components/schemas/Result'
      type: object
      properties:
        data:
          $ref: '#/components/schemas/Hello'
    Hello:
      type: object
      required:
        - message
      properties:
        message:
          type: string
          example: 'Hello, Roman!'