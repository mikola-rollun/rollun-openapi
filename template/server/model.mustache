<?php
declare(strict_types=1);
{{#models}}{{#model}}
namespace {{package}};

use Articus\DataTransfer\Annotation as DTA;
use OpenAPI\DataTransfer\Annotation as ODTA;
use ReflectionProperty;

/**
{{#description}}
 * {{description}}
{{/description}}
 {{#vars}}
 * @property {{>php_data_type}} ${{name}}
 {{/vars}}
 */
class {{classname}}
{
{{#vars}}
    /**
{{#description}}
     * {{description}}
{{/description}}
     * @ODTA\Data(field="{{baseName}}"{{#nullable}}, nullable=true{{/nullable}}{{^required}}, required=false{{/required}}){{#vendorExtensions}}{{#internal.ze-ph.fromQuery}}
{{>model_query_var}}{{/internal.ze-ph.fromQuery}}{{/vendorExtensions}}{{#vendorExtensions}}{{^internal.ze-ph.fromQuery}}
{{>model_normal_var}}{{/internal.ze-ph.fromQuery}}{{/vendorExtensions}}{{^vendorExtensions}}
{{>model_normal_var}}{{/vendorExtensions}}     * @var {{dataType}}
     */
    private {{>php_data_type}} ${{name}};
{{/vars}}

    public function __get($name)
    {
        return $this->isInitialized($name) ? $this->{$name} : null;
    }

    public function __set(string $name, $value): void
    {
        $this->{$name} = $value;
    }

    public function __isset(string $name): bool
    {
        return $this->isInitialized($name) && isset($this->{$name});
    }

    public function __unset(string $name): void
    {
        unset($this->{$name});
    }
{{#vars}}

    public function get{{nameInCamelCase}}(): {{>php_data_type}}
    {
        return $this->{{name}};
    }

    public function set{{nameInCamelCase}}({{>php_data_type}} ${{name}}): self
    {
        $this->{{name}} = ${{name}};
        return $this;
    }

    public function has{{nameInCamelCase}}(): bool
    {
        return $this->isInitialized('{{name}}');
    }
{{/vars}}

    private function isInitialized(string $property): bool
    {
        $rp = new ReflectionProperty(self::class, $property);
        $rp->setAccessible(true);
        return $rp->isInitialized($this);
    }
}{{/model}}{{/models}}
